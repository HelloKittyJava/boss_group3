<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">

	<!--
		#########################################################
		指定连接池配置
		#########################################################
	-->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl"
			value="jdbc:oracle:thin:@192.168.6.100:1521:ORCL" />
		<property name="user" value=" itheima28" />
		<property name="password" value=" itheima28" />
			
	</bean>
	<!-- spring整合JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--
			#########################################################
			指定JPA扫描的实体类所在的包
			#########################################################
		-->
		<property name="packagesToScan"
			value="com.itheima.bos.domain" />
		<!-- 指定持久层提供者为Hibernate -->
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence" />
		</property>
		<property name="jpaVendorAdapter">
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 自动建表 -->
				<property name="generateDdl" value="true" />
				<property name="database" value="ORACLE" />
				<property name="databasePlatform"
					value="org.hibernate.dialect.Oracle10gDialect" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaDialect">
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>

	<!--
		#########################################################
		开启IOC注解.
		指定Spring进行扫描的包，如果该包中的类使用了@Component @Controller@Service等注解，会把这些类注册为bean
		！！！！不要扫描DAO ！！！！
		DAO包下的类要使用Spring Data JPA框架进行扫描
		#########################################################
	-->
	<context:component-scan
		base-package="com.itheima.bos.service,com.itheima.bos.web" />

	<!--
		开启事务注解
		JDK代理方式 : 根据目标对象所实现的接口,创建了一个代理对象
		CGLib代理方式 : 创建一个目标对象的子类

		proxy-target-class:true,使用cglib代理
		proxy-target-class:false,使用jdk代理
	-->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />
	<!-- 基于Spring的自动代理,创建Service层的实现 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- 开启cglib代理 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<!--
		配置切面= 切点(向那里插入代码)+通知 (要插入的代码)
	-->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<!-- 注入安全管理器 -->
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	<!--
		#########################################################
		指定Spring Data JPA要进行扫描的包,该包中的类框架会自动为其创建代理
		#########################################################
	-->
	<jpa:repositories base-package="com.itheima.bos.dao" />

	<!--发布订单的WebService -->
	<jaxrs:server address="/orderService">
		<jaxrs:serviceBeans>
			<ref bean="orderServiceImpl" />
		</jaxrs:serviceBeans>
		<jaxrs:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor"></bean>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor"></bean>
		</jaxrs:outInterceptors>
	</jaxrs:server>

	<!-- 初始化shiro框架提供的过滤器 -->
	<bean id="shiroFilterFactoryBean"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理器 -->
		<property name="securityManager" ref="securityManager"></property>

		<!-- 权限认证的页面,登录页面 -->
		<property name="loginUrl" value="/login.html"></property>
		<!-- 权限认证成功以后要跳转的页面 -->
		<property name="successUrl" value="/index.html"></property>
		<!-- 权限不足要跳转的页面
			只对拦截器生效,不会注解方式生效
		-->
		<property name="unauthorizedUrl"
			value="/unauthorizedUrl.html"></property>
		<!--指定拦截的规则 -->
		<property name="filterChainDefinitions">
			<!--
				authc:框架提供的过滤器,有权限就放行,没有权限就拦截
				anon:框架提供的过滤器,可以匿名访问
				perms:框架提供的过滤器,用户请求资源的时候,会去检查用户是否拥有对应的权限,如果有就放行,没有,跳转到unauthorizedUrl属性指定的页面
				拦截的规则执行的时候是从上往下执行的,一旦有一个规则匹配成功,后面的规则就不再执行了
				拦截的规则不可以折行
			-->
			<!--
				/css/* = anon
				/data/* = anon
				/images/* = anon
				/js/** = anon
				/validatecode.jsp = anon
				/userAction_login.action = anon
				/courierAction_pageQuery.action = perms["courierAction_pageQuery"]
				/hi.html = perms["courierAction_pageQuery"]
				/** = authc
			-->
			<value>



				/** = anon
			</value>
		</property>
	</bean>

	<!-- 注册安全管理器 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 注入realm -->
		<property name="realm" ref="userRealm"></property>
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>
	<!-- 注册缓存管理器 -->
	<bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 指定配置文件的位置 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
	</bean>


	

	<!-- 注册任务详情,通过反射的方式调用目标类的目标方法 -->
	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 注入目标对象 -->
		<property name="targetObject" ref="workbillJob"></property>
		<!-- 注入目标方法 -->
		<property name="targetMethod" value="sendMail"></property>
	</bean>
	<!-- 注册触发器,可以理解为这是一个闹钟 -->
	<bean id="emailTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 指定触发的规则.闹钟在什么时候响起 -->
		<property name="cronExpression">
			<!-- 每隔五秒钟执行一次 -->
			<value>0/5 * * * * ? 2099</value>
		</property>
		<!-- 注入任务详情,闹钟响起的时候要做什么事情 -->
		<property name="jobDetail" ref="jobDetail"></property>
	</bean>
	<!--
		spring提供的一个工厂类
		任务工厂类
		可以简单理解为这是一台手机
	-->
	<bean
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!--
			注入触发器
			可以简单理解为闹钟的集合
		-->
		<property name="triggers">
			<!-- 指定具体的触发器,可以简单理解为具体的一个闹钟 -->
			<list>
				<ref bean="emailTrigger" />
			</list>

		</property>
	</bean>



	<!--发布促销任务的WebService -->
	<jaxrs:server address="/promotionService">
		<jaxrs:serviceBeans>
			<ref bean="promotionServiceImpl" />
		</jaxrs:serviceBeans>
		<jaxrs:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor"></bean>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor"></bean>
		</jaxrs:outInterceptors>
	</jaxrs:server>








</beans>